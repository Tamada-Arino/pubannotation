<fieldset class="main-panel">
	<legend>SPARQL</legend>

	<%= render "namespaces" %>
	<div id="template"></div>
	<div id="sparql_tmp" style="display:none"></div>
	<form id="queryform" name="sparql" method="get">
		<div style="margin-top:5px">
			<textarea id="query" name="query" maxlength="1200"></textarea>
		</div>

		<ul>
			<li>
				<%= link_to_predefined_templates %>
				<%
					query_options = Query.where(category: 0, active:true).order(:category).map{|q| [q.title, q.id]}
					if @organization
						if @organization.class == Project
							query_options += Query.where(category: 1, active:true).order(:category).map{|q| [q.title, q.id]}
						end
						query_options += @organization.queries.where(category: 2, active:true).map{|q| [q.title, q.id]}
					end
				%>
				<%= select_tag :template_select, options_for_select([["Choose one", nil]] + query_options, params[:template_select]) %>
			</li>
			<li>
				Show results in
				<%= radio_button_tag(:show_mode, :raw, params[:show_mode].nil? || params[:show_mode] == 'raw') %>
				<%= label_tag(:show_mode_raw, 'raw') %>
				or
				<%= radio_button_tag(:show_mode, :textae, params[:show_mode] == 'textae') %>
				<%= label_tag(:show_mode_textae, 'TextAE') %>
			</li>
			<li>
				<%= label_tag(:reasoning, 'Reasoning') %>
				<%= check_box_tag(:reasoning, true, @reasoning) %>
			</li>
			<ul>
			<li id="option_select_projects" style="display:inline-block; padding:5px; background-color:#eee">
				<span style="vertical-align: middle">Annotations to show:</span>
				<%= render "project_selection" %>
			</li>
			</ul>
		</ul>
		<input type="reset" style="height: 30px; width: 49%" />
		<input type="submit" style="height: 30px; width: 49%" />
	</form>
	<% if @comment.present? %>
		<div id="comment">
			<%= @comment.html_safe %>
		</div>
	<% end %>
</fieldset>


<script type="text/javascript">
	var sparqlMirror = CodeMirror.fromTextArea(document.getElementById("query"), {
		lineNumbers: true,
		mode: "sparql"
	});

	$(function() {
		init_template();
	});

	$('form').on('reset', function(e)	{
		setTimeout(function() {
			init_template();
		});
	});

	$('#template_select').change(function() {
		set_template();
	})

	$('#template').on('change', 'input', function() {
		var sparql = $('#sparql_tmp').text();
		$('#template input').each(function(index, element){
			var name = $(this).attr('name');
			var val = $(this).val();
			if (val) {sparql = sparql.replace('__' + name + '__', val)}
		});
		sparqlMirror.getDoc().setValue(sparql);
	});

	$('input[type=radio][name=show_mode]').change(function() {
		set_show_mode();
	});

	function set_show_mode(mode) {
		if (mode) {$('#show_mode_' + mode).prop('checked', true)}
		mode = $('input[type=radio][name=show_mode]:checked').val();
		switch(mode) {
		case 'raw':
			$('#option_select_projects').hide();
			$("#selected_projects").prop("disabled", true);
			break;
		case 'textae':
			$('#option_select_projects').show();
			$("#selected_projects").prop("disabled", false);
			break;
		}
	}

	function set_query(query, show_mode, projects) {
		sparqlMirror.getDoc().setValue(query);
		if (!show_mode) {show_mode = 'raw'}
		set_show_mode(show_mode);
		set_project_selection(projects);
	}

	function init_template() {
		var query = decodeURIComponent("<%= CGI.escape(params[:query]) if params.has_key?(:query) %>".replace(/\+/g, " "));
		if (query){
			var projects = "<%= params[:projects] ? params[:projects] : (@project ? @project.name : '') %>";
			var show_mode = "<%= params[:show_mode] %>";
			set_query(query, show_mode, projects);
		} else {
			set_template();
		}
	}

	function set_template(query_id) {
		if (query_id) {$('#template_select').val(query_id)}
		var query_id = $('#template_select').val();

		if (query_id) {
			$.get("/queries/" + query_id + ".json", function(data) {
				var query = data;
				$('#template').html(query_template(query.title));
				<% if @project %>
					query.sparql = query.sparql.replace('#{@project.name}', '<%= @project.name %>');
				<% end %>
				$('#sparql_tmp').text(query.sparql);
				$('#reasoning').prop('checked', query.reasoning);
				sparqlMirror.getDoc().setValue(query.sparql);
				if (!query.show_mode) {query.show_mode = 'raw'}
				set_show_mode(query.show_mode);
				if (!query.projects) {query.projects = '<%= @project.name if @project %>'}
				set_project_selection(query.projects);
			});
		}	else {
			clear_template();
		}
	}

	function clear_template() {
		$('#template').html("");
		sparqlMirror.getDoc().setValue("");
		set_show_mode("raw");
		clear_show_selected_projects();
		update_selected_projects();
		<% if @project %>
			add_project("<%= @project.name %>")
		<% end %>
	}

	function query_template(title) {
		var frags = title.split(/(__)/);
		var slot_p = false;
		var template = '<table><tr><th>Template</th><td>'
		for (var i in frags) {
			if (frags[i] == "__") {
				slot_p = !slot_p;
			}
			else if (slot_p) {
				template += ' <input type="text" name="' + frags[i] + '" placeholder="' + frags[i] + '">';
			}
			else {
				template += frags[i];
			}
		}
		template += "</td></tr></table>"
		return template;
	}
</script>
